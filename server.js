const express = require('express');
const app = express();
const port = 3000;
const cors = require('cors');

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
    swaggerDefinition: {
        info: {
            title: 'MariaDB with NodeJs',
            version: '1.0.0',
            description: 'API autogenerated by Swagger',
        },
        host: '159.65.235.212:3000', 
        basePath: '/',
    },
    apis: ['./server.js'], 
};


const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());
app.use(express.json());

const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
});

app.get('/foods', async (req, res) => {
    try {
        const connection = await pool.getConnection(); 
        const sql = 'SELECT * FROM foods';
        const results = await connection.query(sql); 

        res.json(results);

        connection.release(); 
    } catch (err) {
        console.log('There was an error executing query:', err);
        res.status(500).send('Database error');
    }
});

app.get('/customers', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const sql = 'SELECT CUST_NAME, CUST_CITY, PHONE_NO  FROM customer WHERE CUST_CITY = "London" OR  CUST_CITY = "New York"';
        const results = await connection.query(sql);

        res.json(results);

        connection.release();
    } catch (err) {
        console.log('There was an error executing query:', err);
        res.status(500).send('Database error');
    }
});

app.get('/payments', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const sql = 'SELECT CUST_COUNTRY, SUM(RECEIVE_AMT), SUM(PAYMENT_AMT), SUM(OUTSTANDING_AMT) FROM customer GROUP BY CUST_COUNTRY ORDER BY SUM(OUTSTANDING_AMT) DESC';
        const results = await connection.query(sql); 

        res.json(results);

        connection.release(); 
    } catch (err) {
        console.log('There was an error executing query:', err);
        res.status(500).send('Database error');
    }
});


/**
 * @swagger
 * /companies:
 *   get:
 *     summary: Get a list of companies
 *     description: Retrieve a list of companies with their names and cities, ordered by the city name.
 *     responses:
 *       200:
 *         description: A list of companies
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   COMPANY_NAME:
 *                     type: string
 *                     description: Name of the company
 *                   COMPANY_CITY:
 *                     type: string
 *                     description: City where the company is located
 *       500:
 *         description: Database error
 */
app.get('/companies', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const sql = 'SELECT COMPANY_NAME, COMPANY_CITY  FROM company ORDER BY COMPANY_CITY';
        const results = await connection.query(sql);

        res.json(results);

        connection.release();
    } catch (err) {
        console.log('There was an error executing query:', err);
        res.status(500).send('Database error');
    }
});


/**
 * @swagger
 * /custnumber:
 *   get:
 *     summary: Retrieve customer count per city
 *     description: Returns the number of customers in each city, ordered by the highest number of customers.
 *     responses:
 *       200:
 *         description: A list of cities and the corresponding number of customers
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   CUST_CITY:
 *                     type: string
 *                     description: The city of the customer.
 *                     example: New York
 *                   CUST_COUNTRY:
 *                     type: string
 *                     description: The country of the customer.
 *                     example: USA
 *                   NUMBER_OF_CUSTOMERS:
 *                     type: integer
 *                     description: The number of customers in the city.
 *                     example: 100
 *       500:
 *         description: Database error
 */
app.get('/custnumber', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const sql = 'SELECT CUST_CITY, CUST_COUNTRY, COUNT(CUST_CITY) AS NUMBER_OF_CUSTOMERS  FROM customer GROUP BY CUST_CITY ORDER BY NUMBER_OF_CUSTOMERS DESC ';
        const results = await connection.query(sql);

        const formattedResults = results.map(row => {
            for (let key in row) {
                if (typeof row[key] === 'bigint') {
                    row[key] = row[key].toString(); // Convert BigInt to string
                }
            }
            return row;
        });

        res.json(formattedResults); 
        connection.release();
    } catch (err) {
        console.log('There was an error executing query:', err);
        res.status(500).send('Database error');
    }
});

/**
 * @swagger
 * /foods:
 *   post:
 *     summary: Post a new food entry
 *     description: Add a new food entry to the database.
 *     consumes:
 *       - application/json
 *     produces:
 *       - application/json
 *     parameters:
 *       - in: body
 *         name: food
 *         description: The food to create
 *         schema:
 *           type: object
 *           required:
 *             - ITEM_ID
 *             - ITEM_NAME
 *             - ITEM_UNIT
 *             - COMPANY_ID
 *           properties:
 *             ITEM_ID:
 *               type: integer
 *               example: 100
 *             ITEM_NAME:
 *               type: string
 *               example: 'Banana'
 *             ITEM_UNIT:
 *               type: string
 *               example: 'Pcs'
 *             COMPANY_ID:
 *               type: integer
 *               example: 35
 *     responses:
 *       201:
 *         description: Food added successfully
 *         schema:
 *           type: object
 *           properties:
 *             message:
 *               type: string
 *               example: Food added successfully
 *             id:
 *               type: string
 *               example: "12345"
 *       400:
 *         description: Missing required fields
 *       500:
 *         description: Database error
 */

app.post('/foods', async (req, res) => {
    const { ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;

    if (!ITEM_ID || !ITEM_NAME || !ITEM_UNIT || !COMPANY_ID) {
        return res.status(400).send('Missing required fields');
    }

    try {
        const connection = await pool.getConnection();
        console.log('Connected to DB');
        const sql = 'INSERT INTO foods (ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID) VALUES (?, ?, ?, ?)';
        const result = await connection.query(sql, [ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID]);

        console.log('Query result:', result);

        // Convert BigInt to number/string before sending the response
        res.status(201).json({
            message: 'Food added successfully',
            id: result.insertId ? result.insertId.toString() : null // Use toString() to convert BigInt
        });
        connection.release();
    } catch (err) {
        console.error('Error executing query:', err);
        res.status(500).send('Database error');
    }
});


/**
 * @swagger
 * /foods/{id}:
 *   delete:
 *     summary: Delete a food entry
 *     description: Remove a food entry from the database by ITEM_ID.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID of the food entry to delete
 *         type: integer
 *     responses:
 *       201:
 *         description: Food entry deleted successfully
 *       404:
 *         description: Food entry not found
 *       500:
 *         description: Database error
 */
app.delete('/foods/:id', async (req, res) => {
    const itemId = req.params.id;

    // Validate the itemId
    if (!itemId || isNaN(itemId)) {
        return res.status(400).send('Invalid item ID');
    }

    let connection;
    try {
        connection = await pool.getConnection();
        const sql = 'DELETE FROM foods WHERE ITEM_ID = ?';
        const result = await connection.query(sql, [itemId]);

        if (result.affectedRows > 0) {
            res.status(201).json({ message: 'Food deleted successfully' });
        } else {
            res.status(404).send('Food entry not found');
        }
    } catch (err) {
        console.error('Error executing query:', err);
        res.status(500).send('Database error');
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /foods/{id}:
 *   put:
 *     summary: Update a food entry
 *     description: Update a food entry in the database by ITEM_ID.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID of the food entry to update
 *         type: integer
 *       - in: body
 *         name: food
 *         required: true
 *         description: Food entry details to update
 *         schema:
 *           type: object
 *           properties:
 *             ITEM_NAME:
 *               type: string
 *             ITEM_UNIT:
 *               type: string
 *             COMPANY_ID:
 *               type: integer
 *     responses:
 *       200:
 *         description: Food entry updated successfully
 *       400:
 *         description: Invalid item ID or missing fields
 *       404:
 *         description: Food entry not found
 *       500:
 *         description: Database error
 */
app.put('/foods/:id', async (req, res) => {
    const itemId = req.params.id;
    const { ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;

    // Validate the itemId
    if (!itemId || isNaN(itemId) || !ITEM_NAME || !ITEM_UNIT || !COMPANY_ID) {
        return res.status(400).send('Invalid item ID or missing fields');
    }

    let connection;
    try {
        connection = await pool.getConnection();
        const sql = 'UPDATE foods SET ITEM_NAME = ?, ITEM_UNIT = ?, COMPANY_ID = ? WHERE ITEM_ID = ?';
        const result = await connection.query(sql, [ITEM_NAME, ITEM_UNIT, COMPANY_ID, itemId]);

        if (result.affectedRows > 0) {
            res.status(200).json({ message: 'Food updated successfully' });
        } else {
            res.status(404).send('Food entry not found');
        }
    } catch (err) {
        console.error('Error executing query:', err);
        res.status(500).send('Database error');
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /foods/{id}:
 *   patch:
 *     summary: Partially update a food entry
 *     description: Update one or more fields in food entry in the database by ITEM_ID.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID of the food entry to update
 *         type: integer
 *       - in: body
 *         name: food
 *         required: true
 *         description: Food entry details to update
 *         schema:
 *           type: object
 *           properties:
 *             ITEM_NAME:
 *               type: string
 *             ITEM_UNIT:
 *               type: string
 *             COMPANY_ID:
 *               type: integer
 *     responses:
 *       200:
 *         description: Food entry updated successfully
 *       400:
 *         description: Invalid item ID or missing fields
 *       404:
 *         description: Food entry not found
 *       500:
 *         description: Database error
 */
app.patch('/foods/:id', async (req, res) => {
    const itemId = req.params.id;
    const { ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;

    
    if (!itemId || isNaN(itemId)) {
        return res.status(400).send('Invalid item ID');
    }

    
    if (!ITEM_NAME && !ITEM_UNIT && !COMPANY_ID) {
        return res.status(400).send('No fields provided for update');
    }

    let connection;
    try {
        connection = await pool.getConnection();

        
        const updates = [];
        const values = [];

        if (ITEM_NAME) {
            updates.push('ITEM_NAME = ?');
            values.push(ITEM_NAME);
        }
        if (ITEM_UNIT) {
            updates.push('ITEM_UNIT = ?');
            values.push(ITEM_UNIT);
        }
        if (COMPANY_ID) {
            updates.push('COMPANY_ID = ?');
            values.push(COMPANY_ID);
        }

        
        values.push(itemId);

        
        if (updates.length === 0) {
            return res.status(400).send('No valid fields provided for update');
        }

        
        const sql = `UPDATE foods SET ${updates.join(', ')} WHERE ITEM_ID = ?`;
        const result = await connection.query(sql, values);

        if (result.affectedRows > 0) {
            res.status(200).json({ message: 'Food updated successfully' });
        } else {
            res.status(404).send('Food entry not found');
        }
    } catch (err) {
        console.error('Error executing query:', err);
        res.status(500).send('Database error');
    } finally {
        if (connection) connection.release();
    }
});



app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`);
});

